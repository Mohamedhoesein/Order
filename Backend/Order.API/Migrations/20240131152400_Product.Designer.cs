// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Order.API.Context;

#nullable disable

namespace Order.API.Migrations
{
    [DbContext(typeof(OrderContext))]
    [Migration("20240131152400_Product")]
    partial class Product
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClosedSpecificationValueProductVersion", b =>
                {
                    b.Property<long>("ProductVersionsVersionNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductVersionsProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClosedSpecificationValuesValue")
                        .HasColumnType("text");

                    b.Property<string>("ClosedSpecificationValuesSpecificationName")
                        .HasColumnType("text");

                    b.Property<string>("ClosedSpecificationValuesSubcategoryName")
                        .HasColumnType("text");

                    b.Property<string>("ClosedSpecificationValuesCategoryName")
                        .HasColumnType("text");

                    b.Property<string>("ClosedSpecificationValuesMainCategoryName")
                        .HasColumnType("text");

                    b.HasKey("ProductVersionsVersionNumber", "ProductVersionsProductId", "ClosedSpecificationValuesValue", "ClosedSpecificationValuesSpecificationName", "ClosedSpecificationValuesSubcategoryName", "ClosedSpecificationValuesCategoryName", "ClosedSpecificationValuesMainCategoryName");

                    b.HasIndex("ClosedSpecificationValuesValue", "ClosedSpecificationValuesSpecificationName", "ClosedSpecificationValuesSubcategoryName", "ClosedSpecificationValuesCategoryName", "ClosedSpecificationValuesMainCategoryName");

                    b.ToTable("ClosedSpecificationValueProductVersion");
                });

            modelBuilder.Entity("Order.API.Context.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("MainCategoryName")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Name", "MainCategoryName");

                    b.HasIndex("MainCategoryName");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Order.API.Context.ClosedSpecification", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SubcategoryName")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<string>("MainCategoryName")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Name", "SubcategoryName", "CategoryName", "MainCategoryName");

                    b.HasIndex("SubcategoryName", "CategoryName", "MainCategoryName");

                    b.ToTable("ClosedSpecifications");
                });

            modelBuilder.Entity("Order.API.Context.ClosedSpecificationValue", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("SpecificationName")
                        .HasColumnType("text");

                    b.Property<string>("SubcategoryName")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<string>("MainCategoryName")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Value", "SpecificationName", "SubcategoryName", "CategoryName", "MainCategoryName");

                    b.HasIndex("SpecificationName", "SubcategoryName", "CategoryName", "MainCategoryName");

                    b.ToTable("ClosedSpecificationValues");
                });

            modelBuilder.Entity("Order.API.Context.Filter", b =>
                {
                    b.Property<string>("ClosedSpecificationName")
                        .HasColumnType("text");

                    b.Property<string>("SubcategoryName")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<string>("MainCategoryName")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClosedSpecificationName", "SubcategoryName", "CategoryName", "MainCategoryName");

                    b.HasIndex("SubcategoryName", "CategoryName", "MainCategoryName");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("Order.API.Context.MainCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Name");

                    b.ToTable("MainCategories");
                });

            modelBuilder.Entity("Order.API.Context.OpenSpecification", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SubcategoryName")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<string>("MainCategoryName")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Name", "SubcategoryName", "CategoryName", "MainCategoryName");

                    b.HasIndex("SubcategoryName", "CategoryName", "MainCategoryName");

                    b.ToTable("OpenSpecifications");
                });

            modelBuilder.Entity("Order.API.Context.OpenSpecificationValue", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductVersionNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("SpecificationName")
                        .HasColumnType("text");

                    b.Property<string>("SubcategoryName")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<string>("MainCategoryName")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId", "ProductVersionNumber", "SpecificationName", "SubcategoryName", "CategoryName", "MainCategoryName");

                    b.HasIndex("SpecificationName", "SubcategoryName", "CategoryName", "MainCategoryName");

                    b.ToTable("OpenSpecificationValues");
                });

            modelBuilder.Entity("Order.API.Context.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("MainCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubcategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryName", "CategoryName", "MainCategoryName");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Order.API.Context.ProductImage", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ProductVersionNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name", "ProductVersionNumber", "ProductId");

                    b.HasIndex("ProductId", "ProductVersionNumber");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Order.API.Context.ProductVersion", b =>
                {
                    b.Property<long>("VersionNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("VersionNumber", "ProductId");

                    b.ToTable("ProductVersions");
                });

            modelBuilder.Entity("Order.API.Context.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1aa44a12-9adf-45b2-beca-11b760b69533",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "8f477384-7efe-454c-b1c9-a7a4281a1572",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Order.API.Context.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "Account.Create.Employee",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "Account.Delete.Own",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "Account.Delete.Own",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permission",
                            ClaimValue = "Account.Delete.User",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permission",
                            ClaimValue = "Account.Edit",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permission",
                            ClaimValue = "Account.Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permission",
                            ClaimValue = "Controller.Manage",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permission",
                            ClaimValue = "Employee",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Permission",
                            ClaimValue = "Product.Manage",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Order.API.Context.Subcategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<string>("MainCategoryName")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Name", "CategoryName", "MainCategoryName");

                    b.HasIndex("CategoryName", "MainCategoryName");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Order.API.Context.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TempEmail")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Address",
                            ConcurrencyStamp = "4e1124c2-4ef4-40a3-b211-2e9fa2b0099f",
                            Email = "test@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "TempAdmin",
                            NormalizedEmail = "TEST@TEST.COM",
                            NormalizedUserName = "TEST@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIj9FzLn96pa8OlStBMrYAgEUenp56bUarbToERhE5NPCTn1EDiBdw7ff0VDJiUjnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BVVSLPHREZXATUD2QOIVYZS6FZYNJRJY",
                            TwoFactorEnabled = false,
                            UserName = "test@test.com"
                        });
                });

            modelBuilder.Entity("Order.API.Context.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Order.API.Context.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Order.API.Context.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Order.API.Context.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClosedSpecificationValueProductVersion", b =>
                {
                    b.HasOne("Order.API.Context.ProductVersion", null)
                        .WithMany()
                        .HasForeignKey("ProductVersionsVersionNumber", "ProductVersionsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order.API.Context.ClosedSpecificationValue", null)
                        .WithMany()
                        .HasForeignKey("ClosedSpecificationValuesValue", "ClosedSpecificationValuesSpecificationName", "ClosedSpecificationValuesSubcategoryName", "ClosedSpecificationValuesCategoryName", "ClosedSpecificationValuesMainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order.API.Context.Category", b =>
                {
                    b.HasOne("Order.API.Context.MainCategory", "MainCategory")
                        .WithMany("Categories")
                        .HasForeignKey("MainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Order.API.Context.ClosedSpecification", b =>
                {
                    b.HasOne("Order.API.Context.Subcategory", "Subcategory")
                        .WithMany("ClosedSpecifications")
                        .HasForeignKey("SubcategoryName", "CategoryName", "MainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Order.API.Context.ClosedSpecificationValue", b =>
                {
                    b.HasOne("Order.API.Context.ClosedSpecification", "ClosedSpecification")
                        .WithMany("ClosedSpecificationValues")
                        .HasForeignKey("SpecificationName", "SubcategoryName", "CategoryName", "MainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClosedSpecification");
                });

            modelBuilder.Entity("Order.API.Context.Filter", b =>
                {
                    b.HasOne("Order.API.Context.Subcategory", "Subcategory")
                        .WithMany("Filters")
                        .HasForeignKey("SubcategoryName", "CategoryName", "MainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order.API.Context.ClosedSpecification", "ClosedSpecification")
                        .WithOne("Filter")
                        .HasForeignKey("Order.API.Context.Filter", "ClosedSpecificationName", "SubcategoryName", "CategoryName", "MainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClosedSpecification");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Order.API.Context.OpenSpecification", b =>
                {
                    b.HasOne("Order.API.Context.Subcategory", "Subcategory")
                        .WithMany("OpenSpecifications")
                        .HasForeignKey("SubcategoryName", "CategoryName", "MainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Order.API.Context.OpenSpecificationValue", b =>
                {
                    b.HasOne("Order.API.Context.ProductVersion", "ProductVersion")
                        .WithMany("OpenSpecificationValues")
                        .HasForeignKey("ProductId", "ProductVersionNumber")
                        .HasPrincipalKey("ProductId", "VersionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order.API.Context.OpenSpecification", "OpenSpecification")
                        .WithMany("OpenSpecificationValues")
                        .HasForeignKey("SpecificationName", "SubcategoryName", "CategoryName", "MainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenSpecification");

                    b.Navigation("ProductVersion");
                });

            modelBuilder.Entity("Order.API.Context.Product", b =>
                {
                    b.HasOne("Order.API.Context.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryName", "CategoryName", "MainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Order.API.Context.ProductImage", b =>
                {
                    b.HasOne("Order.API.Context.ProductVersion", "ProductVersion")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId", "ProductVersionNumber")
                        .HasPrincipalKey("ProductId", "VersionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVersion");
                });

            modelBuilder.Entity("Order.API.Context.ProductVersion", b =>
                {
                    b.HasOne("Order.API.Context.Product", "Product")
                        .WithMany("ProductVersions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Order.API.Context.RoleClaim", b =>
                {
                    b.HasOne("Order.API.Context.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order.API.Context.Subcategory", b =>
                {
                    b.HasOne("Order.API.Context.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryName", "MainCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Order.API.Context.UserClaim", b =>
                {
                    b.HasOne("Order.API.Context.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order.API.Context.UserLogin", b =>
                {
                    b.HasOne("Order.API.Context.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order.API.Context.UserRole", b =>
                {
                    b.HasOne("Order.API.Context.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order.API.Context.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order.API.Context.UserToken", b =>
                {
                    b.HasOne("Order.API.Context.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order.API.Context.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Order.API.Context.ClosedSpecification", b =>
                {
                    b.Navigation("ClosedSpecificationValues");

                    b.Navigation("Filter");
                });

            modelBuilder.Entity("Order.API.Context.MainCategory", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Order.API.Context.OpenSpecification", b =>
                {
                    b.Navigation("OpenSpecificationValues");
                });

            modelBuilder.Entity("Order.API.Context.Product", b =>
                {
                    b.Navigation("ProductVersions");
                });

            modelBuilder.Entity("Order.API.Context.ProductVersion", b =>
                {
                    b.Navigation("OpenSpecificationValues");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Order.API.Context.Subcategory", b =>
                {
                    b.Navigation("ClosedSpecifications");

                    b.Navigation("Filters");

                    b.Navigation("OpenSpecifications");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
